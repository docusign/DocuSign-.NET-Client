/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayApplianceInfo
    /// </summary>
    [DataContract]
    public partial class DisplayApplianceInfo :  IEquatable<DisplayApplianceInfo>, IValidatableObject
    {
        public DisplayApplianceInfo()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayApplianceInfo" /> class.
        /// </summary>
        /// <param name="DocumentData">.</param>
        /// <param name="DocumentPages">.</param>
        /// <param name="EnvelopeData">EnvelopeData.</param>
        /// <param name="PageData">.</param>
        /// <param name="RecipientData">.</param>
        public DisplayApplianceInfo(List<DisplayApplianceDocument> DocumentData = default(List<DisplayApplianceDocument>), List<DisplayApplianceDocumentPage> DocumentPages = default(List<DisplayApplianceDocumentPage>), DisplayApplianceEnvelope EnvelopeData = default(DisplayApplianceEnvelope), List<DisplayAppliancePage> PageData = default(List<DisplayAppliancePage>), List<DisplayApplianceRecipient> RecipientData = default(List<DisplayApplianceRecipient>))
        {
            this.DocumentData = DocumentData;
            this.DocumentPages = DocumentPages;
            this.EnvelopeData = EnvelopeData;
            this.PageData = PageData;
            this.RecipientData = RecipientData;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="documentData", EmitDefaultValue=false)]
        public List<DisplayApplianceDocument> DocumentData { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="documentPages", EmitDefaultValue=false)]
        public List<DisplayApplianceDocumentPage> DocumentPages { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeData
        /// </summary>
        [DataMember(Name="envelopeData", EmitDefaultValue=false)]
        public DisplayApplianceEnvelope EnvelopeData { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageData", EmitDefaultValue=false)]
        public List<DisplayAppliancePage> PageData { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientData", EmitDefaultValue=false)]
        public List<DisplayApplianceRecipient> RecipientData { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayApplianceInfo {\n");
            sb.Append("  DocumentData: ").Append(DocumentData).Append("\n");
            sb.Append("  DocumentPages: ").Append(DocumentPages).Append("\n");
            sb.Append("  EnvelopeData: ").Append(EnvelopeData).Append("\n");
            sb.Append("  PageData: ").Append(PageData).Append("\n");
            sb.Append("  RecipientData: ").Append(RecipientData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayApplianceInfo);
        }

        /// <summary>
        /// Returns true if DisplayApplianceInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayApplianceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayApplianceInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentData == other.DocumentData ||
                    this.DocumentData != null &&
                    this.DocumentData.SequenceEqual(other.DocumentData)
                ) && 
                (
                    this.DocumentPages == other.DocumentPages ||
                    this.DocumentPages != null &&
                    this.DocumentPages.SequenceEqual(other.DocumentPages)
                ) && 
                (
                    this.EnvelopeData == other.EnvelopeData ||
                    this.EnvelopeData != null &&
                    this.EnvelopeData.Equals(other.EnvelopeData)
                ) && 
                (
                    this.PageData == other.PageData ||
                    this.PageData != null &&
                    this.PageData.SequenceEqual(other.PageData)
                ) && 
                (
                    this.RecipientData == other.RecipientData ||
                    this.RecipientData != null &&
                    this.RecipientData.SequenceEqual(other.RecipientData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentData != null)
                    hash = hash * 59 + this.DocumentData.GetHashCode();
                if (this.DocumentPages != null)
                    hash = hash * 59 + this.DocumentPages.GetHashCode();
                if (this.EnvelopeData != null)
                    hash = hash * 59 + this.EnvelopeData.GetHashCode();
                if (this.PageData != null)
                    hash = hash * 59 + this.PageData.GetHashCode();
                if (this.RecipientData != null)
                    hash = hash * 59 + this.RecipientData.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
